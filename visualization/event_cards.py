import dash_bootstrap_components as dbc
from dash import html


def create_event_card(event_data: dict) -> dbc.Card:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    card_content = [
        create_card_header(event_data),
        create_card_body(event_data)
    ]

    if event_data.get('image'):
        card_content.insert(0, create_card_image(event_data['image']))

    return dbc.Card(
        card_content,
        className="shadow-sm mb-4",
        style={'height': '100%'}
    )


def create_compact_event_card(event_data: dict) -> dbc.Card:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    return dbc.Card([
        dbc.CardHeader(html.Strong(event_data['title'])),
        dbc.CardBody([
            html.P(f"üìÖ {event_data['date_str']}", className="mb-1"),
            html.P(f"üèõ {event_data['venue']}", className="mb-1"),
            html.P(f"üí∞ {event_data['price_info']}", className="mb-1"),
            dbc.Button(
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                id={'type': 'event-details-btn', 'index': event_data['id']},
                color="primary",
                size="sm",
                className="mt-2"
            )
        ])
    ], className="shadow-sm h-100")


def create_card_image(image_url: str) -> dbc.CardImg:
    """–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return dbc.CardImg(
        src=image_url,
        top=True,
        style={
            'maxHeight': '300px',
            'objectFit': 'cover',
            'width': '100%'
        }
    )


def create_card_header(event_data: dict) -> dbc.CardHeader:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    return dbc.CardHeader([
        html.H4(event_data['title'], className="card-title mb-2"),
        html.Div([
            html.Span(
                f"üìÖ {event_data['date_str']}",
                className="badge bg-light text-dark me-2"
            ),
            html.Span(
                f"üèõ {event_data['venue']}",
                className="badge bg-light text-dark"
            )
        ], className="mb-2"),
        html.Div([
            html.Span(
                f"üè∑ {event_data['first_category']}",
                className="badge bg-primary me-2"
            ),
            html.Span(
                f"üí∞ {event_data['price_info']}",
                className="badge bg-success"
            )
        ])
    ])


def create_card_body(event_data: dict) -> dbc.CardBody:
    """–¢–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    description = event_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    short_description = (description[:200] + '...') if len(description) > 200 else description

    return dbc.CardBody([
        html.H5("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", className="card-subtitle mb-3"),
        html.P(short_description, className="card-text mb-4"),

        html.Div([
            html.Small(
                f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {get_weekday_name(event_data['weekday'])}",
                className="text-muted d-block mb-1"
            ),
            html.Small(
                f"–ú–µ—Å—è—Ü: {get_month_name(event_data['month'])}",
                className="text-muted d-block"
            )
        ])
    ])


def get_weekday_name(weekday_num: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    return weekdays[weekday_num]


def get_month_name(month_num: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞"""
    months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å',
              '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç',
              '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    return months[month_num - 1]